'use strict';

window.app = angular.module('NBA_Pickem_App', ['preBuilt', 'ui.router']);

app.config(function ($urlRouterProvider, $locationProvider) {
  // This turns off hashbang urls (/#about) and changes it to something normal (/about)
  $locationProvider.html5Mode(true);
  // If we go to a URL that ui-router doesn't have registered, go to the "/" url.
  $urlRouterProvider.otherwise('/login');
  // Trigger page refresh when accessing an OAuth route
  $urlRouterProvider.when('/auth/:provider', function () {
    window.location.reload();
  });
});

// This app.run is for listening to errors broadcasted by ui-router, usually originating from resolves
app.run(function ($rootScope) {
  $rootScope.$on('$stateChangeError', function (event, toState, toParams, fromState, fromParams, thrownError) {
    console.info('The following error was thrown by ui-router while transitioning to state "' + toState.name + '". The origin of this error is probably a resolve function:');
    console.error(thrownError);
  });
});

// This app.run is for controlling access to specific states.
app.run(function ($rootScope, AuthService, $state) {

  // The given state requires an authenticated user.
  var destinationStateRequiresAuth = function destinationStateRequiresAuth(state) {
    return state.data && state.data.authenticate;
  };

  // $stateChangeStart is an event fired
  // whenever the process of changing a state begins.
  $rootScope.$on('$stateChangeStart', function (event, toState, toParams) {

    if (!destinationStateRequiresAuth(toState)) {
      // The destination state does not require authentication
      // Short circuit with return.
      return;
    }

    if (AuthService.isAuthenticated()) {
      // The user is authenticated.
      // Short circuit with return.
      return;
    }

    // Cancel navigating to new state.
    event.preventDefault();

    AuthService.getLoggedInUser().then(function (user) {
      // If a user is retrieved, then renavigate to the destination
      // (the second time, AuthService.isAuthenticated() will work)
      // otherwise, if no user is logged in, go to "login" state.
      if (user) {
        $state.go(toState.name, toParams);
      } else {
        $state.go('login');
      }
    });
  });
});

(function () {

  'use strict';

  // Hope you didn't forget Angular! Duh-doy.

  if (!window.angular) throw new Error('I can\'t find Angular!');

  var app = angular.module('preBuilt', []);

  // app.factory('Socket', function () {
  //     if (!window.io) throw new Error('socket.io not found!');
  //     return window.io(window.location.origin);
  // });

  // AUTH_EVENTS is used throughout our app to
  // broadcast and listen from and to the $rootScope
  // for important events about authentication flow.
  app.constant('AUTH_EVENTS', {
    loginSuccess: 'auth-login-success',
    loginFailed: 'auth-login-failed',
    logoutSuccess: 'auth-logout-success',
    sessionTimeout: 'auth-session-timeout',
    notAuthenticated: 'auth-not-authenticated',
    notAuthorized: 'auth-not-authorized'
  });

  app.factory('AuthInterceptor', function ($rootScope, $q, AUTH_EVENTS) {
    var statusDict = {
      401: AUTH_EVENTS.notAuthenticated,
      403: AUTH_EVENTS.notAuthorized,
      419: AUTH_EVENTS.sessionTimeout,
      440: AUTH_EVENTS.sessionTimeout
    };
    return {
      responseError: function responseError(response) {
        $rootScope.$broadcast(statusDict[response.status], response);
        return $q.reject(response);
      }
    };
  });

  app.config(function ($httpProvider) {
    $httpProvider.interceptors.push(['$injector', function ($injector) {
      return $injector.get('AuthInterceptor');
    }]);
  });

  app.service('AuthService', function ($http, Session, $rootScope, AUTH_EVENTS, $q) {

    function onSuccessfulLogin(response) {
      var user = response.data.user;
      Session.create(user);
      $rootScope.$broadcast(AUTH_EVENTS.loginSuccess);
      return user;
    }

    // Uses the session factory to see if an
    // authenticated user is currently registered.
    this.isAuthenticated = function () {
      return !!Session.user;
    };

    this.getLoggedInUser = function (fromServer) {

      // If an authenticated session exists, we
      // return the user attached to that session
      // with a promise. This ensures that we can
      // always interface with this method asynchronously.

      // Optionally, if true is given as the fromServer parameter,
      // then this cached value will not be used.

      if (this.isAuthenticated() && fromServer !== true) {
        return $q.when(Session.user);
      }

      // Make request GET /session.
      // If it returns a user, call onSuccessfulLogin with the response.
      // If it returns a 401 response, we catch it and instead resolve to null.
      return $http.get('/session').then(onSuccessfulLogin).catch(function () {
        return null;
      });
    };

    this.login = function (credentials) {
      return $http.post('/login', credentials).then(onSuccessfulLogin).catch(function () {
        return $q.reject({ message: 'Invalid login credentials.' });
      });
    };

    this.logout = function () {
      return $http.get('/logout').then(function () {
        Session.destroy();
        $rootScope.$broadcast(AUTH_EVENTS.logoutSuccess);
      });
    };
  });

  app.service('Session', function ($rootScope, AUTH_EVENTS) {

    var self = this;

    $rootScope.$on(AUTH_EVENTS.notAuthenticated, function () {
      self.destroy();
    });

    $rootScope.$on(AUTH_EVENTS.sessionTimeout, function () {
      self.destroy();
    });

    this.user = null;

    this.create = function (user) {
      this.user = user;
    };

    this.destroy = function () {
      this.user = null;
    };
  });
})();

app.directive('navbar', function () {
  return {
    restrict: 'E',
    templateUrl: 'js/directives/navbar/navbar.html'
  };
});

app.directive('tabmenu', function () {
  return {
    restrict: 'E',
    templateUrl: 'js/directives/tabMenu/tabMenu.html'
  };
});

app.factory('CookieFactory', function () {

  var cookieObj = {};

  function isCookie() {
    if (document.cookie) {
      parseUserInfo();
      return true;
    } else {
      return false;
    }
  }

  function setCookie(loginInfo) {
    cookieObj.email = loginInfo.email;
    cookieObj.password = loginInfo.password;
    document.cookie = 'userInfoJSON=' + JSON.stringify(cookieObj);
    resetCookieExpire();
    console.log('set cookie!');
    console.log(document.cookie);
  }

  function resetCookieExpire() {
    var currentDate = new Date();
    var expireDate = new Date(currentDate.setMonth(currentDate.getMonth() + 6));
    document.cookie = 'expires=' + expireDate.toUTCString();
  }

  function getCookie() {
    return cookieObj;
  }

  function parseUserInfo() {
    var parseInfo = document.cookie.split('=');
    var userInfo = parseInfo[1].split(';')[0];
    cookieObj = JSON.parse(userInfo);
  }

  return {
    isCookie: isCookie,
    setCookie: setCookie,
    getCookie: getCookie
  };
});

app.controller('LeagueCtrl', function ($scope, $http, LeagueFactory) {

  $scope.tab = { league: 'active' };

  LeagueFactory.getLeagueTeams().then(function (leagueTeams) {
    $scope.teams = leagueTeams;
  });
});

app.factory('LeagueFactory', function ($http, $stateParams) {

  function getLeagueTeams() {
    return $http.get('/api/league/' + $stateParams.id + '/teams').then(function (response) {
      console.log(response.data);
      return response.data;
    });
  }

  return {
    getLeagueTeams: getLeagueTeams

  };
});

app.config(function ($stateProvider) {
  $stateProvider.state('league', {
    url: '/league/:id',
    templateUrl: 'js/views/league/league.html',
    controller: 'LeagueCtrl'
  });
});

app.config(function ($stateProvider) {

  $stateProvider.state('login', {
    url: '/login',
    templateUrl: 'js/views/login/login.html',
    controller: 'LoginCtrl'
  });
});

app.controller('LoginCtrl', function ($scope, LoginFactory, CookieFactory) {
  $scope.login = {};
  $scope.error = null;
  $scope.isLoginState = function () {
    return true;
  };

  function sendLoginNow(loginInfo) {

    $scope.error = null;

    LoginFactory.sendLogin(loginInfo).catch(function () {
      $scope.error = 'Invalid login credentials.';
    });
  }

  $scope.sendLogin = sendLoginNow;

  if (CookieFactory.isCookie()) {
    console.log('cookie found!');
    console.log(CookieFactory.getCookie());
    sendLoginNow(CookieFactory.getCookie());
  }
});

app.factory('LoginFactory', function (AuthService, $state, UserFactory, CookieFactory) {

  function sendLogin(loginInfo) {
    return AuthService.login(loginInfo).then(function () {
      return CookieFactory.setCookie(loginInfo);
    }).then(function () {
      return UserFactory.initUserFactory();
    }).then(function () {
      $state.go('user');
    });
  }

  return {
    sendLogin: sendLogin
  };
});

app.controller('NBA_Ctrl', function ($scope, NBA_League_Factory) {

  $scope.tab = { nbaStandings: 'active' };

  $scope.nbaTeamsInfo = NBA_League_Factory.getNBATeamInfo;
});

app.factory('NBA_League_Factory', function ($http, $log) {

  var nbaTeamInfo = [];

  // For now just making an IIFE will make more
  // performant later
  (function getNBATeamInfo() {
    return $http.get('api/nba-teams/wins/2016').then(function (response) {
      nbaTeamInfo = response.data;
    }).catch($log);
  })();

  return {
    getNBATeamInfo: function getNBATeamInfo() {
      return nbaTeamInfo;
    }
  };
});

app.config(function ($stateProvider) {
  $stateProvider.state('nbaLeague', {
    url: '/nba-standings',
    templateUrl: 'js/views/nba-league/nba.league.html',
    controller: 'NBA_Ctrl'
  });
});

app.controller('TeamCtrl', function ($scope, TeamFactory) {
  $scope.tab = { team: 'active' };

  TeamFactory.getTeams().then(function (teams) {
    $scope.nbaTeams = teams;
    $scope.teamTotalWins = TeamFactory.getTeamWinTotal();
  });
});

app.factory('TeamFactory', function ($http, $stateParams, $log) {

  var teamTotalWins = 0;

  function getTeams() {

    return $http.get('api/team/' + $stateParams.id + '/nba_teams').then(function (response) {
      teamTotalWins = 0;
      response.data.forEach(function (team) {
        teamTotalWins += team.wins;
      });
      return response.data;
    }).catch($log);
  }

  return {
    getTeams: getTeams,
    getTeamWinTotal: function getTeamWinTotal() {
      return teamTotalWins;
    }
  };
});

app.config(function ($stateProvider) {

  $stateProvider.state('team', {
    url: '/team/:id',
    templateUrl: 'js/views/team/team.html',
    controller: 'TeamCtrl'
  });
});

app.controller('UserCtrl', function ($scope, UserFactory) {

  $scope.tab = { home: 'active' };

  $scope.userTeams = UserFactory.getUserTeams();

  $scope.selectedTeamID = UserFactory.getSelectedTeamID();

  $scope.selectedLeagueID = UserFactory.getSelectedLeagueID();
});

app.factory('UserFactory', function ($http, Session, $log) {

  var userTeams = [];
  var userSelectedTeamID = undefined;
  var userSelectedLeagueID = undefined;

  function initUserFactory() {
    return $http.get('api/team/user/' + Session.user.id).then(function (response) {
      userTeams = response.data;
      // Intialize these to first team and league to start
      userSelectedTeamID = userTeams[0].id;
      userSelectedLeagueID = userTeams[0].league.id;
    }).catch($log);
  }

  return {
    initUserFactory: initUserFactory,
    getUserTeams: function getUserTeams() {
      return userTeams;
    },
    getSelectedTeamID: function getSelectedTeamID() {
      return userSelectedTeamID;
    },
    getSelectedLeagueID: function getSelectedLeagueID() {
      return userSelectedLeagueID;
    }
  };
});

app.config(function ($stateProvider) {

  $stateProvider.state('user', {
    url: '/user',
    templateUrl: 'js/views/user/user.html',
    controller: 'UserCtrl'
  });
});
//# sourceMappingURL=data:application/json;charset=utf8;base64,
